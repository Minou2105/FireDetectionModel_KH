{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8336224,"sourceType":"datasetVersion","datasetId":4950864}],"dockerImageVersionId":30699,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-06T14:46:17.729937Z","iopub.execute_input":"2024-05-06T14:46:17.730305Z","iopub.status.idle":"2024-05-06T14:46:17.737127Z","shell.execute_reply.started":"2024-05-06T14:46:17.730276Z","shell.execute_reply":"2024-05-06T14:46:17.736246Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"config_str = \\\n\"\"\"\ninput:\n  image_input_path: \"/kaggle/input/firedetectiondataset/FOREST_FIRE_SMOKE_AND_NON_FIRE_DATASET\"\n  image_size: [256,256]\n  batch_size: 8\n\noutput:\n  result_path: \"../results\"\n  viz_path: \"../visualizations\"\n  logging_path: \"/kaggle/working/\"\n\"\"\"","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:46:17.902889Z","iopub.execute_input":"2024-05-06T14:46:17.903207Z","iopub.status.idle":"2024-05-06T14:46:17.909060Z","shell.execute_reply.started":"2024-05-06T14:46:17.903182Z","shell.execute_reply":"2024-05-06T14:46:17.908014Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"import yaml\nimport sys\n\ndef output_to_file(filename):\n    orig_stdout = sys.stdout\n    f = open(filename, \"w\")\n    sys.stdout = f\n    return orig_stdout, f\n\ndef output_as_before(std_orig, file):\n    sys.stdout = std_orig\n    file.close()\n    \ndef read_config(PATH_CONFIG = \"../config.yml\", file = True):\n    if file:\n        with open(PATH_CONFIG, \"r\") as file:\n            config = yaml.safe_load(file)\n    else:\n        config = yaml.safe_load(PATH_CONFIG)\n    return config","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:46:18.052268Z","iopub.execute_input":"2024-05-06T14:46:18.052595Z","iopub.status.idle":"2024-05-06T14:46:18.059321Z","shell.execute_reply.started":"2024-05-06T14:46:18.052569Z","shell.execute_reply":"2024-05-06T14:46:18.058353Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.utils import image_dataset_from_directory\ndef read_images_from_dir(path_images, image_size, batch_size):\n    ds = image_dataset_from_directory(path_images,\n                                          labels = \"inferred\",\n                                          label_mode = \"categorical\",\n                                          class_names = [\"fire\", \"Smoke\", \"non fire\"] ,\n                                          batch_size=batch_size,\n                                          image_size = image_size) # not supported,  pad_to_aspect_ratio = True)\n    AUTOTUNE = tf.data.AUTOTUNE\n\n    ds = ds.cache().prefetch(buffer_size=AUTOTUNE)\n\n    return ds","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:46:18.193975Z","iopub.execute_input":"2024-05-06T14:46:18.194368Z","iopub.status.idle":"2024-05-06T14:46:18.200322Z","shell.execute_reply.started":"2024-05-06T14:46:18.194326Z","shell.execute_reply":"2024-05-06T14:46:18.199347Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Dropout, Input\n\n\nclass FireDetectionModel(tf.keras.Model):\n    def __init__(self, input_shape):\n        super().__init__()\n        self.custom_input_shape = input_shape\n        self.custom_model = self.create_model()\n\n    def create_model(self):\n        model = tf.keras.models.Sequential([\n            Conv2D(32, (3,3), activation = \"relu\", name = \"conv1\", input_shape = self.custom_input_shape),\n            MaxPooling2D(2,2),\n            Conv2D(64, (3,3), activation = \"relu\", name = \"conv2\"),\n            MaxPooling2D(2,2),\n            Flatten(),\n            Dense(128, activation = \"relu\"),\n            Dense(3, activation=\"softmax\")\n        ])\n        return model\n\n    def call(self, x):\n        return self.custom_model(x)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:46:18.453080Z","iopub.execute_input":"2024-05-06T14:46:18.453427Z","iopub.status.idle":"2024-05-06T14:46:18.462093Z","shell.execute_reply.started":"2024-05-06T14:46:18.453399Z","shell.execute_reply":"2024-05-06T14:46:18.460993Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"def test_fire_initial():\n    config = tf.compat.v1.ConfigProto()\n    config.gpu_options.allow_growth = True\n    session = tf.compat.v1.Session(config=config)\n\n\n    config = read_config(config_str, False)\n    #create_all_dirs(config)\n    image_input_path = config[\"input\"][\"image_input_path\"]\n    viz_output_path = config[\"output\"][\"viz_path\"]\n    logging_path = config[\"output\"][\"logging_path\"]\n    image_size = config[\"input\"][\"image_size\"]\n    batch_size = config[\"input\"][\"batch_size\"]\n\n    filename = \"Initial_Run.txt\"\n    std_orig, file = output_to_file(os.path.join(logging_path, filename))\n\n    train_ds = read_images_from_dir(os.path.join(image_input_path, \"train\"), image_size = image_size, batch_size = batch_size)\n    test_ds = read_images_from_dir(os.path.join(image_input_path, \"test\"), image_size = image_size, batch_size = batch_size)\n\n    #train_ds = train_ds.batch(32)\n    #test_ds = test_ds.batch(32)\n\n    model = FireDetectionModel(input_shape = (image_size[0], image_size[1], 3))\n    model.build(input_shape = (None,image_size[0], image_size[1], 3))\n    model.compile(optimizer=\"adam\",\n                  loss=\"categorical_crossentropy\",\n                  metrics=[\"accuracy\"])\n    model.summary()\n\n    hist = model.fit(train_ds, epochs = 4)\n    output_as_before(std_orig, file)","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:46:18.590322Z","iopub.execute_input":"2024-05-06T14:46:18.590688Z","iopub.status.idle":"2024-05-06T14:46:18.601000Z","shell.execute_reply.started":"2024-05-06T14:46:18.590657Z","shell.execute_reply":"2024-05-06T14:46:18.599986Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"test_fire_initial()","metadata":{"execution":{"iopub.status.busy":"2024-05-06T14:46:18.711476Z","iopub.execute_input":"2024-05-06T14:46:18.711817Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"fire_detection_model\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"fire_detection_model\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ sequential (\u001b[38;5;33mSequential\u001b[0m)         │ ?                      │    \u001b[38;5;34m31,509,955\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ sequential (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)         │ ?                      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">31,509,955</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m31,509,955\u001b[0m (120.20 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">31,509,955</span> (120.20 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m31,509,955\u001b[0m (120.20 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">31,509,955</span> (120.20 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1715006806.722065     130 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\nW0000 00:00:1715006806.739656     130 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\nInvalid SOS parameters for sequential JPEG\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}