{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8336224,"sourceType":"datasetVersion","datasetId":4950864}],"dockerImageVersionId":30699,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-06T20:40:16.676272Z","iopub.execute_input":"2024-05-06T20:40:16.676648Z","iopub.status.idle":"2024-05-06T20:40:16.687728Z","shell.execute_reply.started":"2024-05-06T20:40:16.676616Z","shell.execute_reply":"2024-05-06T20:40:16.686904Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"config_str = \\\n\"\"\"\ninput:\n  image_input_path: \"/kaggle/input/firedetectiondataset/FOREST_FIRE_SMOKE_AND_NON_FIRE_DATASET\"\n  image_size: [128,128]\n  batch_size: 8\n  validation_split: 0.2\n\noutput:\n  result_path: \"../results\"\n  viz_path: \"../visualizations\"\n  logging_path: \"/kaggle/working/\"\n\"\"\"","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:40:16.888837Z","iopub.execute_input":"2024-05-06T20:40:16.889167Z","iopub.status.idle":"2024-05-06T20:40:16.893739Z","shell.execute_reply.started":"2024-05-06T20:40:16.889139Z","shell.execute_reply":"2024-05-06T20:40:16.892797Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import yaml\nimport sys\n\ndef output_to_file(filename):\n    orig_stdout = sys.stdout\n    f = open(filename, \"w\")\n    sys.stdout = f\n    return orig_stdout, f\n\ndef output_as_before(std_orig, file):\n    sys.stdout = std_orig\n    file.close()\n    \ndef read_config(PATH_CONFIG = \"../config.yml\", file = True):\n    if file:\n        with open(PATH_CONFIG, \"r\") as file:\n            config = yaml.safe_load(file)\n    else:\n        config = yaml.safe_load(PATH_CONFIG)\n    return config\n\ndef get_available_devices():\n    print(tf.config.list_physical_devices(\"GPU\"))","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:40:17.071259Z","iopub.execute_input":"2024-05-06T20:40:17.071592Z","iopub.status.idle":"2024-05-06T20:40:17.100093Z","shell.execute_reply.started":"2024-05-06T20:40:17.071565Z","shell.execute_reply":"2024-05-06T20:40:17.099221Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.utils import image_dataset_from_directory\ndef read_images_from_dir(path_images, image_size, batch_size, validation_split = None):\n    if validation_split:\n        ds_train, ds_val = image_dataset_from_directory(path_images,\n                                          labels = \"inferred\",\n                                          label_mode = \"categorical\",\n                                          class_names = [\"fire\", \"Smoke\", \"non fire\"] ,\n                                          batch_size=batch_size,\n                                          image_size = image_size,\n                                          shuffle = True,\n                                          subset = \"both\",\n                                      validation_split = validation_split,\n                                                        seed = 42\n                                         ) # not supported,  pad_to_aspect_ratio = True)\n        AUTOTUNE = tf.data.AUTOTUNE\n\n        ds_train = ds_train.cache().prefetch(buffer_size=AUTOTUNE)\n        ds_val = ds_val.cache().prefetch(buffer_size = AUTOTUNE)\n        return ds_train, ds_val\n    else:\n        ds = image_dataset_from_directory(path_images,\n                                          labels = \"inferred\",\n                                          label_mode = \"categorical\",\n                                          class_names = [\"fire\", \"Smoke\", \"non fire\"] ,\n                                          batch_size=batch_size,\n                                          image_size = image_size,\n                                          shuffle = True\n                                         ) # not supported,  pad_to_aspect_ratio = True)\n        AUTOTUNE = tf.data.AUTOTUNE\n        ds = ds.cache().prefetch(buffer_size=AUTOTUNE)\n        return ds","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:40:17.273023Z","iopub.execute_input":"2024-05-06T20:40:17.273328Z","iopub.status.idle":"2024-05-06T20:40:20.936293Z","shell.execute_reply.started":"2024-05-06T20:40:17.273304Z","shell.execute_reply":"2024-05-06T20:40:20.935408Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"2024-05-06 20:40:17.622568: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-06 20:40:17.622626: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-06 20:40:17.624254: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, BatchNormalization, Dropout, Input, Rescaling\n\n\nclass FireDetectionModel(tf.keras.Model):\n    def __init__(self, input_shape):\n        super().__init__()\n        self.custom_input_shape = input_shape\n        self.custom_model = self.create_model()\n\n    def create_model(self):\n        model = tf.keras.models.Sequential([\n            Rescaling(1/255, input_shape = self.custom_input_shape),\n            Conv2D(2, (3,3), activation = \"relu\", name = \"conv1\", padding = \"same\"),\n            BatchNormalization(),\n            MaxPooling2D(2,2),\n            Dropout(0.4),\n            Conv2D(4, (3,3), activation = \"relu\", name = \"conv2\", padding = \"same\"),\n            BatchNormalization(),\n            MaxPooling2D(2,2),\n            Dropout(0.5),\n            Conv2D(8, (3,3), activation = \"relu\", name = \"conv4\", padding = \"same\"),\n            BatchNormalization(),\n            MaxPooling2D(2,2),\n            Dropout(0.5),\n            Conv2D(8, (3,3), activation = \"relu\", name = \"conv5\", padding = \"same\"),\n            BatchNormalization(),\n            MaxPooling2D(2,2),\n            Dropout(0.5),\n            Conv2D(8, (3,3), activation = \"relu\", name = \"conv6\", padding = \"same\"),\n            BatchNormalization(),\n            MaxPooling2D(2,2),\n            Dropout(0.5),\n            Flatten(),\n            Dense(32, activation = \"relu\"),\n            Dropout(0.4),\n            Dense(3, activation=\"softmax\")\n        ])\n        return model\n\n    def call(self, x):\n        return self.custom_model(x)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:40:20.938303Z","iopub.execute_input":"2024-05-06T20:40:20.938983Z","iopub.status.idle":"2024-05-06T20:40:20.951229Z","shell.execute_reply.started":"2024-05-06T20:40:20.938939Z","shell.execute_reply":"2024-05-06T20:40:20.949662Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"from keras.layers import RandomFlip, RandomRotation\ndef get_aug_model(augment = False):\n    if not augment:\n        return None\n    \n    data_aug_model = tf.keras.models.Sequential([\n        RandomFlip(\"vertical\"),\n        RandomRotation(0.2)#not too  much\n    ])\n    return data_aug_model","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:40:20.952684Z","iopub.execute_input":"2024-05-06T20:40:20.952968Z","iopub.status.idle":"2024-05-06T20:40:20.964778Z","shell.execute_reply.started":"2024-05-06T20:40:20.952946Z","shell.execute_reply":"2024-05-06T20:40:20.963935Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"import keras\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\ndef test_fire_initial():\n    \n    print(get_available_devices())\n    version = \"V15\"\n    config = tf.compat.v1.ConfigProto()\n    config.gpu_options.allow_growth = True\n    session = tf.compat.v1.Session(config=config)\n    \n    \n\n    config = read_config(config_str, False)\n    #create_all_dirs(config)\n    image_input_path = config[\"input\"][\"image_input_path\"]\n    viz_output_path = config[\"output\"][\"viz_path\"]\n    logging_path = config[\"output\"][\"logging_path\"]\n    image_size = config[\"input\"][\"image_size\"]\n    batch_size = config[\"input\"][\"batch_size\"]\n    validation_split = config[\"input\"][\"validation_split\"]\n\n    filename = version + \"_Run.txt\"\n    std_orig, file = output_to_file(os.path.join(logging_path, filename))\n\n    train_ds, val_ds = read_images_from_dir(os.path.join(image_input_path, \"train\"), image_size = image_size, batch_size = batch_size, validation_split=validation_split)\n    test_ds = read_images_from_dir(os.path.join(image_input_path, \"test\"), image_size = image_size, batch_size = batch_size)\n\n    aug_model = get_aug_model(augment = False)\n    if aug_model:\n        AUTOTUNE = tf.data.AUTOTUNE\n        train_ds = train_ds.map(lambda x, y: (aug_model(x), y), num_parallel_calls=AUTOTUNE)\n    #train_ds = train_ds.batch(32)\n    #test_ds = test_ds.batch(32)\n    \n\n    model = FireDetectionModel(input_shape = (image_size[0], image_size[1], 3))\n    model.build(input_shape = (None,image_size[0], image_size[1], 3))\n    model.compile(optimizer=\"adam\",\n                  loss=\"categorical_crossentropy\",\n                  metrics=[\"accuracy\"])\n    model.summary(expand_nested = True)\n    keras.utils.plot_model(model, show_shapes = True, expand_nested = True)\n    \n    callbacks = [\n        EarlyStopping(monitor='val_loss', patience=5, verbose=0, mode='min', restore_best_weights = True),\n        ModelCheckpoint(version + '_model-{epoch:03d}-{accuracy:03f}-{val_accuracy:03f}.keras', save_best_only=True, monitor='val_loss', mode='min')\n    ]\n\n    hist = model.fit(train_ds, validation_data=val_ds, epochs = 15, callbacks = callbacks)\n    print(\"Test Accuracy: \" + str(model.evaluate(test_ds)))\n    output_as_before(std_orig, file)\n    \n    #plot(\"accuracy\")\n    #plot(\"categorical_crossentropy\")\n    \n    return hist","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:40:20.967331Z","iopub.execute_input":"2024-05-06T20:40:20.967621Z","iopub.status.idle":"2024-05-06T20:40:20.980721Z","shell.execute_reply.started":"2024-05-06T20:40:20.967598Z","shell.execute_reply":"2024-05-06T20:40:20.979736Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"hist = test_fire_initial()","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:40:20.981718Z","iopub.execute_input":"2024-05-06T20:40:20.982004Z","iopub.status.idle":"2024-05-06T20:44:27.304397Z","shell.execute_reply.started":"2024-05-06T20:40:20.981977Z","shell.execute_reply":"2024-05-06T20:44:27.303480Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')]\nNone\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/preprocessing/tf_data_layer.py:18: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"fire_detection_model\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"fire_detection_model\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ sequential (\u001b[38;5;33mSequential\u001b[0m)         │ ?                      │         \u001b[38;5;34m5,943\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ rescaling (\u001b[38;5;33mRescaling\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m3\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv1 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m2\u001b[0m)    │            \u001b[38;5;34m56\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m128\u001b[0m, \u001b[38;5;34m2\u001b[0m)    │             \u001b[38;5;34m8\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m2\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout (\u001b[38;5;33mDropout\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m2\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv2 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m4\u001b[0m)      │            \u001b[38;5;34m76\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization_1      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m4\u001b[0m)      │            \u001b[38;5;34m16\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d_1            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m4\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m4\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv4 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │           \u001b[38;5;34m296\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization_2      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │            \u001b[38;5;34m32\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d_2            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv5 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │           \u001b[38;5;34m584\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization_3      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m8\u001b[0m)      │            \u001b[38;5;34m32\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d_3            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m)        │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m)        │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv6 (\u001b[38;5;33mConv2D\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m)        │           \u001b[38;5;34m584\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization_4      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m)        │            \u001b[38;5;34m32\u001b[0m │\n│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d_4            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m8\u001b[0m)        │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_4 (\u001b[38;5;33mDropout\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m8\u001b[0m)        │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ flatten (\u001b[38;5;33mFlatten\u001b[0m)          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dense (\u001b[38;5;33mDense\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m4,128\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_5 (\u001b[38;5;33mDropout\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dense_1 (\u001b[38;5;33mDense\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)              │            \u001b[38;5;34m99\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ sequential (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Sequential</span>)         │ ?                      │         <span style=\"color: #00af00; text-decoration-color: #00af00\">5,943</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ rescaling (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Rescaling</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)    │            <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)      │            <span style=\"color: #00af00; text-decoration-color: #00af00\">76</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization_1      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)      │            <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d_1            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │           <span style=\"color: #00af00; text-decoration-color: #00af00\">296</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization_2      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │            <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d_2            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │           <span style=\"color: #00af00; text-decoration-color: #00af00\">584</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization_3      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)      │            <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d_3            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ conv6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)        │           <span style=\"color: #00af00; text-decoration-color: #00af00\">584</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ batch_normalization_4      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)        │            <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ max_pooling2d_4            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)                  │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)        │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">4,128</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dropout_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│    └ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">99</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m5,943\u001b[0m (23.21 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">5,943</span> (23.21 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m5,883\u001b[0m (22.98 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">5,883</span> (22.98 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m60\u001b[0m (240.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">60</span> (240.00 B)\n</pre>\n"},"metadata":{}},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1715028038.818988    7503 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\nW0000 00:00:1715028038.839114    7503 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\nInvalid SOS parameters for sequential JPEG\nW0000 00:00:1715028122.997174    7502 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ndef plot(hist, value, model_name):\n    res = hist.history\n    plt.figure()\n    plt.xlabel(\"Epoch\")\n    plt.ylabel(\"Epoch\")\n    plt.plot(hist.epoch, res[value], label = \"Train \" + str(value))\n    plt.plot(hist.epoch, res[\"val_\" + value], label = \"Val \" + str(value))\n    plt.legend()\n    plt.savefig(f\"/kaggle/working/plot_{value}_{model_name}.png\")\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:44:27.306023Z","iopub.execute_input":"2024-05-06T20:44:27.306327Z","iopub.status.idle":"2024-05-06T20:44:27.312660Z","shell.execute_reply.started":"2024-05-06T20:44:27.306302Z","shell.execute_reply":"2024-05-06T20:44:27.311688Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"plot(hist, \"accuracy\", \"V15\")","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:44:29.987645Z","iopub.execute_input":"2024-05-06T20:44:29.988035Z","iopub.status.idle":"2024-05-06T20:44:30.373656Z","shell.execute_reply.started":"2024-05-06T20:44:29.988005Z","shell.execute_reply":"2024-05-06T20:44:30.372640Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"plot(hist, \"loss\", \"V15\")","metadata":{"execution":{"iopub.status.busy":"2024-05-06T20:44:30.375480Z","iopub.execute_input":"2024-05-06T20:44:30.375826Z","iopub.status.idle":"2024-05-06T20:44:30.752938Z","shell.execute_reply.started":"2024-05-06T20:44:30.375798Z","shell.execute_reply":"2024-05-06T20:44:30.751929Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#https://stackoverflow.com/questions/68191448/unknown-image-file-format-one-of-jpeg-png-gif-bmp-required\nfrom pathlib import Path\nimport imghdr\n\ndata_dir = \"/kaggle/input/firedetectiondataset/FOREST_FIRE_SMOKE_AND_NON_FIRE_DATASET\"\nimage_extensions = [\".png\", \".jpg\"]  # add there all your images file extensions\n\nimg_type_accepted_by_tf = [\"bmp\", \"gif\", \"jpeg\", \"png\"]\nfor filepath in Path(data_dir).rglob(\"*\"):\n    if filepath.suffix.lower() in image_extensions:\n        img_type = imghdr.what(filepath)\n        if img_type is None:\n            print(f\"{filepath} is not an image\")\n        elif img_type not in img_type_accepted_by_tf:\n            print(f\"{filepath} is a {img_type}, not accepted by TensorFlow\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}